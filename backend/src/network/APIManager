import { Client } from './Client.js';
import { FastifyInstance } from 'fastify';
import * as db from "../data/validation.js";
import { AuthCode } from '../shared/constants.js';


export class APIManager {
	sidClientMap: Map<string, Client> = new Map();
	fastify: FastifyInstance;

	constructor(fastify: FastifyInstance) {
		this.fastify = fastify;
	}

	// HTTP Endpoints
	setUpRoutes() {

		// ROOT
		this.fastify.get('/', async (request, reply) => {
			const { sid } = request.query as { sid?: string};
			if (!sid) {
				return reply.code(400).send({ message: "Error: missing SID"} );
			}
			this.findOrCreateClient(sid);
			reply.send( { message: "Welcome to Battle Pong!" } );
		});

		// LOGIN
		this.fastify.post('/login', async (request, reply) => {
			const { sid } = request.query as { sid: string};
			let client = this.findOrCreateClient(sid);

			// get login details from Google Auth token or by default request body
			let loginInfo: { username: string, email: string, password: string };
            const { token } = request.body as { token?: string };
			if (token) {
				try {
					const decoded = this.fastify.jwt.verify(token);
					loginInfo = decoded.user;
				}
				catch (err) {
					return reply.code(401).send({success: false, message: "Error: Invalid JWT token"});
				}
			}
			else {
				loginInfo = request.body as { username: string, email: string, password: string };
			}
			
			// Verify login with db
			const result = await db.verifyLogin(loginInfo.username, loginInfo.password);
			let error: string = "";
			switch (result) {
				case AuthCode.OK:
					client.setInfo(loginInfo.username, loginInfo.email);
					client.loggedIn = true;
					console.log(`User ${client.username} successfully logged in`);
					return reply.send({ success: true, message: `User '${client.username}' successfully logged in` });
				
				case AuthCode.NOT_FOUND:
					error = `User '${client.username}' doesn't exist`;
					break ;
				case AuthCode.BAD_CREDENTIALS:
					error = `Username or password incorrect`;
					break ;				
				case AuthCode.ALREADY_LOGIN:
					error = `User already loggin in`;
					break ;
			}
			console.log(error);
			return reply.code(401).send({ success: false, message: error })
		});

		// LOGOUT
		this.fastify.post('/login', async (request, reply) => {
			const { sid } = request.query as { sid: string};
			let client = this.getClient(sid);
			if (!client) {
				return reply.code(401).send( {success: false, message: "Logout failed: user not logged in"});
			}

			this.sidClientMap.delete(sid);
			await db.logoutUser(client.username);
			console.log(`User ${client.username} successfully logged out`);
			return reply.send({ success: true, message: `User '${client.username}' successfully logged out` })
		})
	}

	findOrCreateClient(sid: string): Client {
		let client: Client | undefined = this.sidClientMap.get(sid);
		if (!client) {
			console.log(`New client created, SID: ${sid}`);
			client = new Client(sid);
			this.sidClientMap.set(sid, client);
		}
		return client;
	}

	getClient(sid: string): Client | undefined {
		return (this.sidClientMap.get(sid));
	}
}